from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import networkx as nx
import pandas as pd
import numpy as np
import pickle, sys, os



sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))



__author__ = 'Chris Hilldrup'



'''
For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.
'''
# NOTE: following provided by Coursera
P1_Graphs = pickle.load(open(sys.path[-1] + '/Data/A4_graphs', 'rb'))



'''
P1_Graphs is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:

    Preferential Attachment ('PA')
    Small World with low probability of rewiring ('SW_L')
    Small World with high probability of rewiring ('SW_H')

Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.

The graph_identification function should return a list of length 5 where each element in the list is either 'PA', 'SW_L', or 'SW_H'.
'''
def graph_identification():
    '''
    This will not work with networkx version 2.4. At least one graph in P1_Graphs
    does not have attribute '_adj'
    
    The general idea is to compare the degree distributions and the
    average clustering of each graph. Preferential Attachment graphs will follow
    a power law distribution, whereas small world graphs will not. To differentiate
    the small world graphs, compare the clustering. Generally, a high P value will
    reduce clustering, and a low P value will increase clustering.
    
    Solution worked using Coursera's Jupyter Nokebook. I suspect networkx version
    1.11 may be required to run this function.
    '''
    for G in P1_Graphs:
        degrees = G.degree()
        degree_values = sorted(set(degrees.values()))
        histogram = [list(degrees.values()).count(i)/float(nx.number_of_nodes(G)) \
                    for i in degree_values]
        
        print(histogram)
        print(nx.average_clustering(G))
        
    return ['PA','SW_L','SW_L','PA','SW_H']



'''
Part 2 - Company Emails

For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.

The network also contains the node attributes Department and ManagementSalary.

Department indicates the department in the company which the person belongs to, and ManagementSalary indicates whether that person is receiving a management position salary.
'''
# NOTE: following provided by Coursera
G = nx.read_gpickle(sys.path[-1] + '/Data/email_prediction.txt')



'''
Part 2A - Salary Prediction

Using network G, identify the people in the network with missing values for the node attribute ManagementSalary and predict whether or not these individuals are receiving a management position salary.

To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have ManagementSalary data, and predict a probability of the node receiving a management salary for nodes where ManagementSalary is missing.

Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).

Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.

Example:

    1       1.0
    2       0.0
    5       0.8
    8       1.0
        ...
    996     0.7
    1000    0.5
    1001    0.0
    Length: 252, dtype: float64
'''
def salary_predictions():
    df = pd.DataFrame(index=nx.nodes(G), columns=['Department','ManagementSalary'])
    for x,y in G.node.items():
        df.loc[x] = y
        
    df['Department'] = df['Department'].astype('float')
    df['ManagementSalary'] = df['ManagementSalary'].astype('float')
    
    hits = nx.hits(G)
    df['Hub'] = hits[0].values()
    df['Auth'] = hits[1].values()
    
    df_nan_free = df.dropna()
    
    X_train = df_nan_free['Hub'].to_numpy().reshape(-1,1)
    
    y_train = df_nan_free['ManagementSalary']
    
    X_predict = df[(df.index.isin(df.dropna().index) == False)]['Hub']
    
    log_reg = LogisticRegression().fit(X_train, y_train)
    predict = log_reg.predict_proba(X_predict.to_numpy().reshape(-1,1))
    
    return pd.Series(predict[:,1], index=X_predict.index)



'''
For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable future_connections. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the Future Connection column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.
'''
# NOTE: following provided by coursera
future_connections = pd.read_csv(sys.path[-1] + '/Data/Future_Connections.csv',
                                 index_col=0, converters={0: eval})



'''
Using network G and future_connections, identify the edges in future_connections with missing values and predict whether or not these edges will have a future connection.

To accomplish this, you will need to create a matrix of features for the edges found in future_connections using networkx, train a sklearn classifier on those edges in future_connections that have Future Connection data, and predict a probability of the edge being a future connection for those edges in future_connections where Future Connection is missing.

Your predictions will need to be given as the probability of the corresponding edge being a future connection.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).

Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.

Example:

    (107, 348)    0.35
    (542, 751)    0.40
    (20, 426)     0.55
    (50, 989)     0.35
              ...
    (939, 940)    0.15
    (555, 905)    0.35
    (75, 101)     0.65
    Length: 122112, dtype: float64
'''
def new_connections_predictions():
    adamic_adar = nx.adamic_adar_index(G, future_connections.index)
    future_connections['adamic_adar'] = [x[2] for x in adamic_adar]
    
    df_nan_free = future_connections.dropna()
    
    X_train = df_nan_free['adamic_adar'].to_numpy().reshape(-1,1)
    
    y_train = df_nan_free['Future Connection']
    
    X_predict = future_connections[(future_connections
                                    .index
                                    .isin(df_nan_free.index) == False)]\
                                    ['adamic_adar']
    
    log_reg = LogisticRegression().fit(X_train, y_train)
    predict = log_reg.predict_proba(X_predict.to_numpy().reshape(-1,1))
    
    return pd.Series(predict[:,1], index=X_predict.index)
